/*
 * Movie API Specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * Contact: juliuscanute@touchcapture.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace MovieApi.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class MoviePage : IEquatable<MoviePage>
    { 
        /// <summary>
        /// Start Page
        /// </summary>
        /// <value>Start Page</value>
        [DataMember(Name="startPage")]
        public int? StartPage { get; set; }

        /// <summary>
        /// End Page
        /// </summary>
        /// <value>End Page</value>
        [DataMember(Name="endPage")]
        public int? EndPage { get; set; }

        /// <summary>
        /// Total Movies
        /// </summary>
        /// <value>Total Movies</value>
        [DataMember(Name="movies")]
        public int? Movies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MoviePage {\n");
            sb.Append("  StartPage: ").Append(StartPage).Append("\n");
            sb.Append("  EndPage: ").Append(EndPage).Append("\n");
            sb.Append("  Movies: ").Append(Movies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MoviePage)obj);
        }

        /// <summary>
        /// Returns true if MoviePage instances are equal
        /// </summary>
        /// <param name="other">Instance of MoviePage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MoviePage other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StartPage == other.StartPage ||
                    StartPage != null &&
                    StartPage.Equals(other.StartPage)
                ) && 
                (
                    EndPage == other.EndPage ||
                    EndPage != null &&
                    EndPage.Equals(other.EndPage)
                ) && 
                (
                    Movies == other.Movies ||
                    Movies != null &&
                    Movies.Equals(other.Movies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (StartPage != null)
                    hashCode = hashCode * 59 + StartPage.GetHashCode();
                    if (EndPage != null)
                    hashCode = hashCode * 59 + EndPage.GetHashCode();
                    if (Movies != null)
                    hashCode = hashCode * 59 + Movies.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MoviePage left, MoviePage right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MoviePage left, MoviePage right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
